"use client";
import React, { useState, useRef } from "react";
import { Swiper, SwiperSlide } from "swiper/react";
import { Navigation, Pagination } from "swiper/modules";
import "swiper/css";
import "swiper/css/navigation";
import "swiper/css/pagination";
import Image from "next/image";
import Play from "@/assets/play.svg";
import Quotation from "@/assets/quotation.svg";

const videoData = [
  {
    name: "Just Robotics",
    role: "–£—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
    video: "/videos/video1.mp4",
    quote:
      "–î–ª—è –Ω–∞—à–µ–π —à–∫–æ–ª—ã –º—ã –∑–∞–∫—É–ø–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–æ–±–ª–æ–∫–æ–≤ –≤ ingame –∏ —ç—Ç–æ –±—ã–ª–æ –æ—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ",
  },
  {
    name: "Intel Core 17",
    role: "–î—Ä—É–∂–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç üí°",
    video: "/videos/video2.mp4",
    quote:
      "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä? –ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç –≤—Å–µ —ç—Ç–∏ i5 i7, –Ω–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ? –û—Ç–≤–µ—Ç–∏–ª–∏...",
  },
  {
    name: "–ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º",
    role: "–ë—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ, —É–¥–æ–±–Ω–æ",
    video: "/videos/video3.mp4",
    quote:
      "–ü—Ä–∏ —Å–±–æ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –Ω–∞–¥–æ —Å–∫–∞—á–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–≥—Ä–∞–º–º —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤. –ß—Ç–æ –±—ã –≤—ã –Ω–µ...",
  },
  {
    name: "Cougar Speeder",
    role: "–õ—É—á—à–µ–µ –∏–≥—Ä–æ–≤–æ–µ –∫—Ä–µ—Å–ª–æ!",
    video: "/videos/video4.mp4",
    quote:
      "Cougar Speeder ‚Äì –ª—É—á—à–µ–µ —Ä–∞–±–æ—á–µ–µ –∏ –∏–≥—Ä–æ–≤–æ–µ –∫—Ä–µ—Å–ª–æ 2024 –≥–æ–¥–∞! üèÜ–≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω–∞—è –∏ —É–¥–æ–±–Ω–∞—è...",
  },
  {
    name: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è",
    role: "NVIDIA Reflex –≤ –¥–µ–ª–µ",
    video: "/videos/video5.mp4",
    quote:
      "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã ü§î –û–± —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ NVIDIA Reflex? –û–Ω–∞ —Å–Ω–∏–∂–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –≤–∞—à–∏–º–∏...",
  },
];

const Testimonials = () => {
  const [playingIndex, setPlayingIndex] = useState(null);
  const timeoutRef = useRef(null);

  const handlePause = (index) => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
    timeoutRef.current = setTimeout(() => {
      setPlayingIndex(null);
    }, 20000);
  };

  const handlePlay = () => {
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
  };

  return (
    <div className="w-full max-w-[1600px] mx-auto px-4 lg:px-20 py-12 bg-[#0F0F0F]">
      <h2 className="text-2xl md:text-3xl font-bold font-clashDisplay text-white text-center mb-4">
        –í—Å–µ –ª–∏ —É –Ω–∞—Å –Ω–∞–¥–µ–∂–Ω–æ–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ?
      </h2>
      <p className="text-center text-gray-300 mb-10 text-sm md:text-base font-clashDisplay">
        –õ—É—á—à–µ –≤—Å–µ–≥–æ –æ–± —ç—Ç–æ–º –≤–∞–º —Ä–∞—Å—Å–∫–∞–∂—É—Ç —Å–∞–º–∏ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏!
      </p>

      <Swiper
        modules={[Navigation, Pagination]}
        spaceBetween={20}
        slidesPerView={1}
        breakpoints={{
          640: { slidesPerView: 1 },
          768: { slidesPerView: 2 },
          1024: { slidesPerView: 3 },
          1280: { slidesPerView: 4 },
        }}
        loop={true}
        navigation
        pagination={{
          clickable: true,
          renderBullet: (index, className) =>
            index > 4 ? "" : `<span class="${className}"></span>`,
        }}
        className="!pb-12 custom-swiper rounded-none"
      >
        {videoData.map((item, index) => (
          <SwiperSlide key={index}>
            <div className="flex items-center justify-center h-full">
              <div className="bg-[#111] rounded-xl overflow-hidden shadow-lg p-4 text-white flex flex-col h-full relative">
                {playingIndex === index ? (
                  <video
                    src={item.video}
                    className="w-full rounded-md"
                    controls
                    autoPlay
                    onPlay={handlePlay}
                    onPause={() => handlePause(index)}
                    onEnded={() => setPlayingIndex(null)}
                  />
                ) : (
                  <div className="relative">
                    <video
                      src={item.video}
                      className="w-full rounded-md"
                      muted
                      preload="metadata"
                    />
                    <div className="absolute top-0 left-0 bg-pink-600 text-white text-xs md:text-sm font-clashDisplay p-2 md:p-3 font-semibold">
                      {item.quote}
                    </div>
                    <div className="hidden  absolute lg:block top-20 right-2">
                      <Image className="" src={Quotation} alt="quotation" />
                    </div>

                    <button
                      className="absolute bottom-4 left-4 bg-pink-600 hover:bg-pink-700 text-white text-xs md:text-sm font-semibold px-3 py-1 w-[80px] h-[30px] flex items-center justify-center gap-x-2 font-[family-name:var(--font-orbitron)] cursor-pointer"
                      onClick={() => setPlayingIndex(index)}
                    >
                      <span>Play</span>
                      <Image src={Play} alt="play" />
                    </button>
                  </div>
                )}
                <h3 className="mt-4 absolute bottom-25 left-8 font-[family-name:var(--font-inter)] font-bold text-base text-white drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]">
                  {item.name}
                </h3>
                <p className="text-sm font-normal font-[family-name:var(--font-inter)] text-[#fff] mb-2 absolute bottom-18 left-8 drop-shadow-[0_1px_2px_rgba(0,0,0,0.8)]">
                  {item.role}
                </p>
              </div>
            </div>
          </SwiperSlide>
        ))}
      </Swiper>
    </div>
  );
};

export default Testimonials;
